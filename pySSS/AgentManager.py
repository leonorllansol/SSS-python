import conversation
import configParser
from dialog.SimpleQA import SimpleQA
from texttools.normalizers import normalizerFactory
from texttools.normalizers.normalizer import Normalizer
from resources.externalAgents import AgentFactory
from xml.dom import minidom
import subprocess
import operator
import time


"""
The AgentManager class is responsible for instantiating all of the available external agents and gathering each of their responses when faced with a user query.

It communicates directly with the SaySomethingSmart module: a single object of AgentManager is instantiated from the side of SaySomethingSmart.py, and SaySomethingSmart is the module that calls the AgentManager.generateAgentsAnswers() function.

The AgentManager also uses the AgentFactory library (located in /resources/externalAgents/), which has the main role of gathering all the files related to the available external agents and instantiating each one.

Finally, this module interacts with the LuceneWrapper java class for the purpose of executing searches in the corpus in order to gather the possible answer candidates for each agent.
"""


class AgentManager:

    """
    __init__: Initialize the AgentManager object

    - New Conversation object
    - Retrieve ExternalAgentsPath from config.xml through configParser
    - Initialize the avaiable external agents
    - Check the normalizers to use
    """
    def __init__(self):
        self.conversation = conversation.Conversation()
        self.externalAgentsPath = configParser.getExternalAgentsPath()
        self.externalAgents = self.initializeAgents()
        self.normalizers = normalizerFactory.createNormalizers(configParser.getNormalizers())


    """
    initializeAgents(self): Call AgentFactory lib in order to generate all available external agents
    Return array of externalAgents (ex: [<FaqsAgent Object>, <MixAgent Object>])
    """
    def initializeAgents(self):
        return AgentFactory.createExternalAgents(self.externalAgentsPath)



    """
    generateAgentsAnswers(self, userInput): generates the answers for each agent and returns them in the form of a dictionary

    userInput: String containing the user's input
    - Generate Lucene candidates
    - Send the userInput and the candidates to each available external agent
    - Gather the answers of each agent and store them in the agentAnswers dictionary

    Return dictionary containing the answers of each agent
    Key (String): Name of the agent
    Value (String): Answer of the agent
    """
    def generateAgentsAnswers(self,userInput):

        agentAnswers = {}

        t = time.time()
        candidates = self.generateLuceneCandidates(userInput,"")
        print("Candidate generation time: " + str(time.time() - t))

        for agent in self.externalAgents:

            agentTime = time.time()

            try:
                if(agent.normalizeUserInput):
                    userInput = Normalizer().applyNormalizations(userInput, self.normalizers)
            except AttributeError:
                pass
                
            try:
                if(agent.corpusPath):
                    answer = agent.requestAnswer(userInput,self.generateLuceneCandidates(userInput,agent))
            except AttributeError:
                if(len(candidates) > 0):
                    answer = agent.requestAnswer(userInput,candidates)
                else:
                    answer = configParser.getNoAnswerMessage()

            try:
                agentAnswers[agent.agentName] = answer
            except IndexError:
                agentAnswers[agent.agentName] = configParser.getNoAnswerMessage()

            print(agent.agentName + " execution time: " + str(time.time() - agentTime))

        return agentAnswers




    """
    generateLuceneCandidates(self, query): Generates Lucene candidates for the external agents to use

    query: String containing the user's input
    - Normalize the query using the Normalizers specified in the config.xml
    - Call LuceneWrapper in order to retrieve the best candidates for the given query
    - Read the results written by the LuceneWrapper through the opening of temporary file luceneresults.txt
    - Transform the .txt file generated by LuceneWrapper into SimpleQA objects through the function getCandidatesFromLuceneResults()


    Return lucene candidates in the form of a SimpleQA object array
    """
    def generateLuceneCandidates(self,query,agent):

        try:
            corpusPath = agent.corpusPath
        except AttributeError:
            corpusPath = configParser.getCorpusPath()

        try:
            indexPath = agent.indexPath
        except AttributeError:
            indexPath = configParser.getIndexPath()

        try:
            dbPath = agent.dbPath
        except AttributeError:
            dbPath = configParser.getDbPath()

        query_normalized = Normalizer().applyNormalizations(query, self.normalizers)
        list_args = ["java", "LuceneWrapper", "-2", corpusPath, query_normalized, configParser.getLanguage(), indexPath, configParser.getHitsPerQuery(), dbPath]
        sp1 = subprocess.Popen(list_args,shell=False)
        exitCode = sp1.wait()


        luceneResults = open('luceneresults.txt', 'r',encoding='utf8')
        lines = luceneResults.readlines()
        strippedLines = []
        for line in lines:
            strippedLines.append(line.strip('\n'))

        luceneResults.close()

        candidates = getCandidatesFromLuceneResults(query, strippedLines)
        return candidates


"""
getCandidatesFromLuceneResults(query, lines): Converts Lucene information into SimpleQA objects

query: String containing the user's input
lines: Array of Strings containing the information regarding Lucene's best candidates
- For each line object, create a SimpleQA object using the given information as parameters for the object's constructor
- Append the new SimpleQA object to the candidates array

Return lucene candidates in the form of a SimpleQA object array
"""
def getCandidatesFromLuceneResults(query, lines):
    candidates = []
    qaObjectTime = 0
    appendTime = 0
    for i in range(0, len(lines), 6):
        previousQA = lines[i]
        question = lines[i+1]
        answer = lines[i+2]
        normalizedQuestion = lines[i+3]
        normalizedAnswer = lines[i+4]
        diff = lines[i+5]
        qa = SimpleQA(previousQA, question, normalizedQuestion, answer, normalizedAnswer, diff)
        candidates.append(qa)
    return candidates
    




